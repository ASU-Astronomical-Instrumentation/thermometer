{"version":3,"sources":["fonts/Orbitron-Bold.ttf","components/TemperatureDisplay.js","actions/temperatureActions.js","actions/actionTypes.js","bt_temp.js","components/BluetoothSetTemperature.js","App.js","serviceWorker.js","reducers/temperatureReducers.js","index.js"],"names":["module","exports","H1","styled","h1","Temperature","props","temperature","parseFloat","this","degrees","toFixed","isNaN","id","scale","React","Component","setTemperature","newTemperature","type","parse_float","value","offset","negative","getInt8","getUint8","exponent","mantissa","Math","pow","bluetoothTemperatureContants","health_thermometer","str","temperature_measurement","temperature_type","intermediate_temperature","measurement_interval","bluetoothInit","a","navigator","bluetooth","requestDevice","filters","services","undefined","device","console","error","log","name","gatt","connect","server","getPrimaryService","service","readBluetoothCharacteristic","connection","characteristic","getCharacteristic","chr","readValue","Button","button","BluetoothSetTemperature","state","currentTemperature","bluetoothConnection","temperatureInterval","initializeBluetoothInterval","bind","initializeBluetoothConnection","clearInterval","document","getElementById","style","display","then","conn","setState","bluetoothError","setInterval","actions","readTemperatureError","onClick","temperatureDisplay","dispatch","bindActionCreators","temperatureActions","App","className","Boolean","window","location","hostname","match","initialState","temperatureReducer","action","store","createStore","temperatureReducers","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5c314b7e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Orbitron-Bold.10f7e47e.ttf\";","import React from \"react\";\r\nimport styled from 'styled-components'\r\n\r\nconst H1 = styled.h1`\r\n  font-family: Orbitron;\r\n  color: white;\r\n  font-size: 5vw;\r\n`\r\n\r\nclass Temperature extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    var temperature = parseFloat(this.props.degrees).toFixed(2);\r\n    if (isNaN(temperature)) {\r\n        return <H1 id=\"info\">Loading...</H1>;\r\n    }\r\n    return <H1 id=\"temp\">{temperature}&deg;{this.props.scale}</H1>;\r\n  }\r\n}\r\n\r\nexport default Temperature;\r\n","import { SET_TEMPERATURE } from './actionTypes'; \r\n\r\nexport function setTemperature(newTemperature) {\r\n    return {\r\n        type: SET_TEMPERATURE, \r\n        newTemperature\r\n    }\r\n}","export const SET_TEMPERATURE = \"SET_TEMPERATURE\"","let parse_float =\r\nfunction(value, offset) {\r\n    const negative = value.getInt8(offset + 2) >>> 31;\r\n\r\n    const [b0, b1, b2, exponent] = [\r\n        value.getUint8(offset),\r\n        value.getUint8(offset + 1),\r\n        value.getUint8(offset + 2),\r\n        value.getInt8(offset + 3)\r\n    ];\r\n\r\n    let mantissa = b0 | (b1 << 8) | (b2 << 16);\r\n    if (negative) {\r\n        mantissa |= 255 << 24;\r\n    }\r\n\r\n    return mantissa * Math.pow(10, exponent);\r\n}\r\n\r\n/**\r\n * Exports\r\n */\r\n\r\n/**\r\n * @name bluetoothTemperatureContants\r\n * @description bluetooth temperature constants\r\n */\r\nexport const bluetoothTemperatureContants = {\r\n    services: {\r\n        health_thermometer: {\r\n            str: 'health_thermometer',\r\n            id: 0x1809\r\n        }\r\n    },\r\n    characteristics: {\r\n        temperature_measurement: {\r\n            str: 'temperature_measurement',\r\n            id: 0x2AC1\r\n        },\r\n        temperature_type: {\r\n            str: 'temperature_type',\r\n            id: 0x2A1D\r\n        },\r\n        intermediate_temperature: {\r\n            str: 'intermediate_temperature',\r\n            id: 0x2A1E\r\n        },\r\n        measurement_interval: {\r\n            str: 'measurement_interval',\r\n            id: 0x2A21\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @name bluetoothInit\r\n * @description Initializes the bluetooth temperature device connection\r\n * @returns connection object or empty object on error\r\n */\r\nexport let bluetoothInit =\r\nasync function() {\r\n    let device = await navigator.bluetooth.requestDevice({\r\n        filters: [{\r\n            services: [ bluetoothTemperatureContants.services.health_thermometer.str ]\r\n        }]\r\n    });\r\n\r\n    if(device == undefined) {\r\n        console.error(\"No connection to device\");\r\n        return {};\r\n    }\r\n    else {\r\n        console.log(\"Conencted to: \", device.name);\r\n    }\r\n\r\n    let server = await device.gatt.connect();\r\n    if(server == undefined) {\r\n        console.error(\"No connection to server\");\r\n        return {};\r\n    }\r\n    else {\r\n        console.log(\"Connected to server\");\r\n    }\r\n\r\n    let service = await server.getPrimaryService( bluetoothTemperatureContants.services.health_thermometer.str );\r\n    if(service == undefined) {\r\n        console.error(\"No connection to service\");\r\n        return {};\r\n    }\r\n    else {\r\n        console.log(\"Connected to service\");\r\n    }\r\n\r\n\r\n    return {\r\n        device: device,\r\n        service: service\r\n    };\r\n}\r\n\r\n/**\r\n * @name readBluetoothCharacteristic \r\n * @description Reads data from the given characteristic temperature device connection\r\n * @returns float or throws error\r\n */\r\nexport let readBluetoothCharacteristic =\r\nasync function(connection, characteristic) {\r\n    if(characteristic == bluetoothTemperatureContants.characteristics.temperature_measurement.str) {\r\n        let chr = await connection.service.getCharacteristic(bluetoothTemperatureContants.characteristics.temperature_measurement.str);\r\n\r\n        if(chr == undefined) {\r\n            console.log(\"No connection to characteristic\");\r\n            return {};\r\n        }\r\n        else {\r\n            console.log(\"Conencted to characteristic\");\r\n        }\r\n\r\n        return(parse_float(await chr.readValue(), 1));\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { bindActionCreators } from 'redux';\r\nimport * as temperatureActions from '../actions/temperatureActions';\r\nimport { connect } from 'react-redux'\r\nimport { readBluetoothCharacteristic, bluetoothInit, bluetoothTemperatureContants} from '../bt_temp'\r\nimport styled from 'styled-components'\r\n\r\nconst Button = styled.button`\r\n  font-family: Orbitron;\r\n  color: white;\r\n  font-size: 5vw;\r\n  background-color: Transparent;\r\n  background-repeat:no-repeat;\r\n  border: none;\r\n  cursor:pointer;\r\n  overflow: hidden;\r\n  outline:none;\r\n`\r\n\r\nclass BluetoothSetTemperature extends React.Component  {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentTemperature: 0,\r\n      bluetoothConnection: undefined\r\n    }\r\n    this.temperatureInterval = undefined; \r\n    this.initializeBluetoothInterval = this.initializeBluetoothInterval.bind(this);\r\n    this.initializeBluetoothConnection = this.initializeBluetoothConnection.bind(this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.temperatureInterval != undefined) {\r\n      clearInterval(this.temperatureInterval);\r\n    }\r\n  }\r\n\r\n  initializeBluetoothConnection() {\r\n    let connection = bluetoothInit();\r\n    document.getElementById(\"info\").style.display = \"inline\"\r\n    document.getElementById(\"button\").style.display = \"none\"\r\n    connection.then(\r\n      (conn) => {\r\n        this.setState({bluetoothConnection: conn}, this.initializeBluetoothInterval);\r\n      }, \r\n      (error) => {\r\n        console.log(error);\r\n        this.setState({bluetoothError: error})\r\n      });\r\n  }\r\n\r\n  initializeBluetoothInterval() {\r\n    console.log(this.state.bluetoothConnection); \r\n    \r\n    this.temperatureInterval = setInterval( () => {\r\n      let readTemperature = readBluetoothCharacteristic(this.state.bluetoothConnection, bluetoothTemperatureContants.characteristics.temperature_measurement.str);\r\n      readTemperature.then(\r\n        (temperature) => {\r\n          this.props.actions.setTemperature(temperature);\r\n        }, \r\n        (error) => {\r\n          console.log(error); \r\n          this.setState({readTemperatureError: error});\r\n        }\r\n      )\r\n      \r\n    }, 1000);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button id=\"button\" type=\"button\" onClick={this.initializeBluetoothConnection}> > Connect to Device</Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        actions: bindActionCreators({ ...temperatureActions }, dispatch),\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    temperatureDisplay: state.temperatureDisplay\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BluetoothSetTemperature);\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { connect } from 'react-redux';\r\nimport Temp from \"./components/TemperatureDisplay\";\r\nimport BluetoothSetTemperature from \"./components/BluetoothSetTemperature\";\r\nimport './fonts/Orbitron-Bold.ttf'\r\n\r\nclass App extends React.Component  {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    let scale = \"F\";\r\n    return (\r\n      <div className=\"App\">\r\n        <BluetoothSetTemperature />\r\n        <Temp degrees={this.props.temperatureDisplay.temperature} scale={scale} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  temperatureDisplay: state.temperatureDisplay\r\n});\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { SET_TEMPERATURE } from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    temperatureDisplay: {\r\n        temperature: \"#.##\"\r\n    }\r\n}\r\n\r\nfunction temperatureReducer(state = initialState, action) {\r\n    switch(action.type) {\r\n        case SET_TEMPERATURE:\r\n            return {\r\n                ...state,\r\n                temperatureDisplay: {\r\n                    ...state.temperatureDisplay,\r\n                    temperature: action.newTemperature\r\n                }\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default temperatureReducer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux'\r\nimport { createStore } from 'redux'; \r\nimport temperatureReducers from './reducers/temperatureReducers';\r\n\r\n\r\n\r\nconst store = createStore(temperatureReducers);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}